# investment_game.py
import streamlit as st
import numpy as np
import pandas as pd
import random

# -------------------- CONFIG --------------------
STOCKS = {
    "LTECH":     {"mu": 0.15, "sigma": 0.30, "sector": "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ"},
    "MEDIHOS":  {"mu": 0.10, "sigma": 0.15, "sector": "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"},
    "DOOF":   {"mu": 0.08, "sigma": 0.10, "sector": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£"},
    "OILMAX":    {"mu": 0.12, "sigma": 0.25, "sector": "‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô"},
    "SHOUSE":  {"mu": 0.09, "sigma": 0.20, "sector": "‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏Ø"},
}
MONTHS = 12
INITIAL_PRICE = 100
MU_ANNUAL = 0.12
SIGMA_ANNUAL = 0.25
# ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πà‡∏≤‡∏ß
news_pool = [
    {"text": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤ AI ", "impact": {"TECHX": 0.22, "MEDIHOS": -0.04}},
    {"text": "‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà ", "impact": {"MEDIHOS": 0.28, "DOOF": -0.08}},
    {"text": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏û‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ", "impact":  {"DOOF": -0.10, "SHOUSE": -0.03}},
    {"text": "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏û‡∏∏‡πà‡∏á ", "impact": {"OILMAX": 0.20, "TECHX": -0.10}},
    {"text": "‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏Ø ", "impact": {"SHOUSE": -0.15, "MEDIHOS": -0.02}},
    {"text": "‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô ", "impact": {"TECHX": -0.08, "DOOF": 0.04, "OILMAX": -0.04}},
    {"text": "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏±‡∏ê‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô ", "impact": {"OILMAX": 0.20, "SHOUSE": -0.04}},
    {"text": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå ", "impact": {"MEDIHOS": 0.20, "TECHX": -0.06}},
    {"text": "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô ", "impact": {"DOOF": -0.09, "OILMAX": 0.05}},
    {"text": "‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ ", "impact": {"TECHX": -0.10, "SHOUSE": -0.05, "DOOF": -0.03}},
    {"text": "‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ", "impact": {"SHOUSE": 0.08, "TECHX": 0.10, "DOOF": 0.08}},
    {"text": "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏•‡∏î‡∏°‡∏•‡∏û‡∏¥‡∏© ", "impact": {"OILMAX": -0.17, "MEDIHOS": 0.08}},
    {"text": "‡∏ß‡∏¥‡∏Å‡∏§‡∏ï‡πÇ‡∏†‡∏Ñ‡∏†‡∏±‡∏ì‡∏ë‡πå ", "impact": {"DOOF": -0.11, "OILMAX": -0.09}},
    {"text": "‡∏Å‡∏≤‡∏£‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà ", "impact": {"TECHX": 0.14, "SHOUSE": 0.08}},
    {"text": "‡∏°‡∏≤‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à ", "impact": {"SHOUSE": 0.12, "DOOF": 0.11}},
    {"text": "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏•‡πâ‡∏≥‡∏™‡∏°‡∏±‡∏¢ ", "impact": {"TECHX": 0.21, "MEDIHOS": 0.09}},
    {"text": "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏•‡∏î ", "impact": {"OILMAX": -0.11, "DOOF": 0.06}},
    {"text": "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ó‡πâ‡∏ß‡∏á‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô ", "impact": {"SHOUSE": -0.12, "TECHX": -0.09}},
    {"text": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡∏ß‡∏±‡∏Ñ‡∏ã‡∏µ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ", "impact": {"MEDIHOS": 0.33, "DOOF": -0.05}},
    {"text": "‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏ä‡∏ô ", "impact": {"DOOF": -0.15, "TECHX": -0.13, "OILMAX": -0.07}},
]

# -------------------- FUNCTIONS --------------------
def generate_returns(seed, mu_annual, sigma_annual, impact_pct=0.0, start_price=100):
    np.random.seed(seed)
    mu_monthly = (1 + mu_annual)**(1/12) - 1
    sigma_monthly = sigma_annual / np.sqrt(12)
    returns = np.random.normal(loc=mu_monthly, scale=sigma_monthly, size=MONTHS)
    returns += (impact_pct / 12)
    prices = [start_price]
    for r in returns:
        prices.append(prices[-1] * (1 + r))
    return prices, returns


# -------------------- SESSION INIT --------------------
if "turn" not in st.session_state:
    st.session_state.turn = 1
if "last_prices" not in st.session_state:
    st.session_state.last_prices = {stock: INITIAL_PRICE for stock in STOCKS}
if "page" not in st.session_state:
    st.session_state.page = "page_1"

if "turn_news" not in st.session_state:
    st.session_state.turn_news = {}
    for y in range(1, 11):
        st.session_state.turn_news[y] = random.choice(news_pool)

if "news_bought_in_turn" not in st.session_state:
    st.session_state.news_bought_in_turn = {}

if "impact_next_turn" not in st.session_state:
    st.session_state.impact_next_turn = {}
if "stock_prices_by_turn" not in st.session_state:
    st.session_state.stock_prices_by_turn = {}


# -------------------- GAME DISPLAY --------------------
#page_1
if st.session_state.page == "page_1":
    st.title('INVESTMENTGAME')
    # how to play
    st.header('How To Play')
    st.text("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 10,000 ‡πÅ‡∏•‡∏∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πã‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô\n‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏ã‡∏∂‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏ö‡∏≠‡∏Å‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏î‡πâ ‡πÉ‡∏Ñ‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô 10 ‡∏õ‡∏µ ‡πÄ‡∏õ‡πã‡∏ô‡∏ú‡∏π‡πâ‡∏Ç‡∏ô‡∏∞")

    if st.button("Register") :
        st.session_state.page = "page_2"
#page_2
elif st.session_state.page == "page_2":
    st.title('INVESTMENTGAME')
    st.header('Register')
    player_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô", key="name_input")
    shared_seed = st.text_input("‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Å‡∏° (seed)", key="seed_input")

    if not shared_seed.isnumeric():
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å seed ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        st.stop()

    if player_name:
        
        st.session_state.page = "page_3"
        st.session_state.player_name = player_name
        st.session_state.seed = int(shared_seed)
        st.rerun()  # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏°

    else:
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°")
#page_3
elif st.session_state.page == "page_3":
    current_turn = st.session_state.turn

    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    if current_turn not in st.session_state.stock_prices_by_turn:
        st.session_state.stock_prices_by_turn[current_turn] = {}

        for stock, info in STOCKS.items():
            # ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ô‡∏µ‡πâ (‡∏à‡∏≤‡∏Å turn-1)
            impact_pct = st.session_state.impact_next_turn.get(current_turn, {}).get(stock, 0.0)

            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            start_price = st.session_state.last_prices.get(stock, INITIAL_PRICE)

            # ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            prices, returns = generate_returns(
                seed=st.session_state.seed + current_turn,
                mu_annual=info["mu"],
                sigma_annual=info["sigma"],
                impact_pct=impact_pct,
                start_price=start_price
            )

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô session_state
            st.session_state.stock_prices_by_turn[current_turn][stock] = {
                "prices": prices,
                "returns": returns
            }

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ô‡∏µ‡πâ (‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)
            st.session_state.last_prices[stock] = prices[-1]





    st.title('INVESTMENTGAME')
    st.header(f"TURN {st.session_state.turn}")
    
    #data 

    
    st.subheader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π")
    selected_stock = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏∏‡πâ‡∏ô", list(STOCKS.keys()))

    info = STOCKS[selected_stock]
    mu = info["mu"]
    sigma = info["sigma"]

    st.info(f"‡∏´‡∏∏‡πâ‡∏ô {selected_stock} ({info['sector']})")

    prices = st.session_state.stock_prices_by_turn[current_turn][selected_stock]["prices"]
    returns = st.session_state.stock_prices_by_turn[current_turn][selected_stock]["returns"]
    current_price = prices[-1]

    # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á turn ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö turn ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    st.session_state.last_prices[selected_stock] = prices[-1]

    months = ["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"] + [f"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {i+1}" for i in range(MONTHS)]


    df = pd.DataFrame({
        "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": months,
        "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô": prices,
        "‡∏ú‡∏•(%)": [None] + list(np.round(returns * 100, 2))
    })
    df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = pd.Categorical(df["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"], categories=months, ordered=True)
    


    

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    df_chart = pd.DataFrame({"‡πÄ‡∏î‡∏∑‡∏≠‡∏ô": months, "‡∏£‡∏≤‡∏Ñ‡∏≤": prices})
    df_chart["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"] = pd.Categorical(df_chart["‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"], categories=months, ordered=True)
    df_chart = df_chart.sort_values("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")  # <-- ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    st.line_chart(df_chart.set_index("‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"))
    






# -------------------- ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô --------------------
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° state
    if "cash" not in st.session_state:
        st.session_state.cash = 10000
    if "portfolio" not in st.session_state:
        st.session_state.portfolio = {}

    current_price = prices[-1]  # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å session ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà



    col1, col2 = st.columns(2)
    with col1:
        st.subheader("‡∏ã‡∏∑‡πâ‡∏≠-‡∏Ç‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô")
        st.markdown(f"üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î: **{st.session_state.cash:,.2f}** ‡∏ö‡∏≤‡∏ó")
        st.markdown(f"üìà ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô {selected_stock} ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{current_price:.2f}** ‡∏ö‡∏≤‡∏ó")

        # ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ
        stock_data = st.session_state.portfolio.get(selected_stock, {"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": 0, "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢": 0.0})
        holding = stock_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
        avg_cost = stock_data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"]

        st.markdown(f"üì¶ ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏∑‡∏≠‡∏´‡∏∏‡πâ‡∏ô {selected_stock} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô **{holding}** ‡∏´‡∏∏‡πâ‡∏ô (‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {avg_cost:.2f})")
    with col2:
        st.subheader("üìä ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
        total_value = 0
        port_data = []
        for stock, data in st.session_state.portfolio.items():
            qty = data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
            avg_cost = data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢"]
            current = st.session_state.last_prices.get(stock, INITIAL_PRICE)
            total = current * qty
            total_value += total
            port_data.append({
                "‡∏´‡∏∏‡πâ‡∏ô": stock,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": qty,
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô": f"{current:.2f}",
                "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°": f"{total:,.2f}"
            })

        df_port = pd.DataFrame(port_data)
        st.dataframe(df_port, use_container_width=True)
        st.markdown(f"üíº **‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏£‡∏ß‡∏°:** {total_value + st.session_state.cash:,.2f} ‡∏ö‡∏≤‡∏ó")


    # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
    col1, col2, col3 = st.columns(3)
    with col1:
        buy_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠", min_value=0, step=1, key="buy_qty")
        if st.button("‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏∏‡πâ‡∏ô"):
            cost = buy_qty * current_price
            if cost > st.session_state.cash:
                st.warning("‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠")
            elif buy_qty > 0:
                total_cost = holding * avg_cost + cost
                total_qty = holding + buy_qty
                avg_cost_new = total_cost / total_qty

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏≠‡∏£‡πå‡∏ï
                st.session_state.portfolio[selected_stock] = {
                    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": total_qty,
                    "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢": avg_cost_new
                }
                st.session_state.cash -= cost
                st.success(f"‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠ {buy_qty} ‡∏´‡∏∏‡πâ‡∏ô {selected_stock} ‡πÅ‡∏•‡πâ‡∏ß")
                st.rerun()

    with col2:
        sell_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", min_value=0, max_value=holding, step=1, key="sell_qty")
        if st.button("‡∏Ç‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô"):
            if sell_qty > 0:
                revenue = sell_qty * current_price
                remaining_qty = holding - sell_qty
                st.session_state.cash += revenue

                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏≠‡∏£‡πå‡∏ï
                if remaining_qty > 0:
                    st.session_state.portfolio[selected_stock] = {
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": remaining_qty,
                        "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢": avg_cost
                    }
                else:
                    del st.session_state.portfolio[selected_stock]

            
                st.success(f"‚úÖ ‡∏Ç‡∏≤‡∏¢ {sell_qty} ‡∏´‡∏∏‡πâ‡∏ô {selected_stock} ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö {revenue:,.2f} ‡∏ö‡∏≤‡∏ó")
                st.rerun()




    # -------------------- ‡∏Ç‡πà‡∏≤‡∏ß / ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß --------------------
    #‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏µ‡∏ô‡∏µ‡πâ
    with col3:
        st.subheader("üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ")

        current_turn = st.session_state.turn
        current_news = st.session_state.turn_news[current_turn]

        if st.session_state.news_bought_in_turn.get(current_turn, False):
            st.info(f"üìå ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ‡∏ô‡∏µ‡πâ: {current_news['text']}")
        else:
            if st.button("üì© ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß (500 ‡∏ö‡∏≤‡∏ó)"):
                if st.session_state.cash >= 500:
                    st.session_state.cash -= 500
                    st.session_state.news_bought_in_turn[current_turn] = True
                    st.success("‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                    st.rerun()
                else:
                    st.warning("‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß")

    # -------------------- ‡∏à‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô --------------------
    st.markdown("---")
    if st.button("‚û°Ô∏è ‡∏à‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô"):
        current_turn = st.session_state.turn

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ô‡∏µ‡πâ (‡∏ñ‡πâ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        if st.session_state.news_bought_in_turn.get(current_turn, False):
            impact = st.session_state.turn_news[current_turn]["impact"]
            st.session_state.impact_next_turn[current_turn + 1] = impact
        else:
            st.session_state.impact_next_turn[current_turn + 1] = {}

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô
        st.session_state.turn += 1

        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏ô‡∏∞)
        st.session_state.news_bought_in_turn[st.session_state.turn] = False

        st.rerun()